variables:
    CIBW_BUILD: cp36-*
    CIBW_BEFORE_BUILD: yum install -y lapack-devel libpng-devel freetype-devel freetype blas-devel pkg-config; pip install -r requirements.txt; 

strategy:
  matrix:
    Linux:
      vmImage: 'Ubuntu-16.04'
      build_name: 'manylinux'
      python.version: '3.7'

pool:

  vmImage: $(vmImage)
  python.version: $(python.version)

steps:

- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'

- bash: |
    pyconf_path=`echo "from sysconfig import get_paths;print(get_paths()['include'])"|python`
    sed -i '/#define hypot _hypot/d' $pyconf_path/pyconfig.h
  displayName: remove conflicting hypot bug in pyconf
  condition: eq( variables['Agent.OS'], 'Windows_NT' )

- bash: |
        python -m pip install --upgrade pip
        python -m pip install cibuildwheel==1.1.0 --user
        python -m cibuildwheel --output-dir wheelhouse .
  displayName: manylinux build
  condition: eq( variables['Agent.OS'], 'Linux' )

- task: BatchScript@1
  inputs:
    filename: 'C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat'
    arguments: 'amd64'
    modifyEnvironment: True 
  displayName: setup visual studio env on windows
  condition: eq( variables['Agent.OS'], 'Windows_NT' )

# took this from the scipy azure build script so credit to them in case needed
- powershell: |
    $wc = New-Object net.webclient;
    $wc.Downloadfile("https://3f23b170c54c2533c070-1c8a9b3114517dc5fe17b7c3f8c63a43.ssl.cf2.rackcdn.com/openblas-v0.3.7-win_amd64-gcc_7_1_0.zip", "openblas.zip")
    $tmpdir = New-TemporaryFile | %{ rm $_; mkdir $_ }
    Expand-Archive "openblas.zip" $tmpdir
    cp $tmpdir\64\lib\libopenblas_v0.3.7-gcc_7_1_0.a $(System.DefaultWorkingDirectory)\\cppEDM\\lib\\libopenblas.a
  displayName: 'download openblas'
  condition: eq( variables['Agent.OS'], 'Windows_NT' )

- bash: |
    distutils_path=`echo "import distutils,os;print(os.path.dirname(distutils.__file__))"|python`
    echo $'[build]\ncompiler=mingw32' > $distutils_path/distutils.cfg
  displayName: setup mingw compiler option for windows build
  condition: eq( variables['Agent.OS'], 'Windows_NT' )

- script: |
    pip install -r requirements.txt
    pip install --upgrade wheel
    pip install --upgrade setuptools
  displayName: install required python modules for pyEDM build

- script: python setup.py bdist_wheel
  displayName: build pyEDM wheel

- publish: $(System.DefaultWorkingDirectory)/dist
  artifact: $(build_name)
  condition: ne( variables['Agent.OS'], 'Linux' )

- task: PublishBuildArtifacts@1
  inputs: {pathtoPublish: 'wheelhouse'}
  condition: eq( variables['Agent.OS'], 'Linux' )
